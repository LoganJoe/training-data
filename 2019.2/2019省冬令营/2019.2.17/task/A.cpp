#include<bits/stdc++.h>
#define N 10000005
#define mod 1000000007
#define ll long long
int n,fac[N], ans;
ll Pow (ll x, ll k)
{
	ll t=1;
	for (; k; k >>= 1, x = x * x % mod) if (k & 1) t = t * x % mod;
	return t;
}
std::map<int,int> f;
int F (int n)
{
	if (n < 2)  return 1;
	if (f[n]) return f[n];
	int b = Pow (2, floor(log(n) / log(2)));
	int nl = std::min (b - 1, n - b / 2);
	return f[n] = 1ll * n * F(nl) % mod * F(n - 1 - nl) % mod;
}
int A[]={
682498929,491101308,76479948,723816384,67347853,27368307,625544428,199888908,888050723,927880474,281863274,
661224977,623534362,970055531,261384175,195888993,66404266,547665832,109838563,933245637,724691727,368925948,
268838846,136026497,112390913,135498044,217544623,419363534,500780548,668123525,128487469,30977140,522049725,
309058615,386027524,189239124,148528617,940567523,917084264,429277690,996164327,358655417,568392357,780072518,
462639908,275105629,909210595,99199382,703397904,733333339,97830135,608823837,256141983,141827977,696628828,
637939935,811575797,848924691,131772368,724464507,272814771,326159309,456152084,903466878,92255682,769795511,
373745190,606241871,825871994,957939114,435887178,852304035,663307737,375297772,217598709,624148346,671734977,
624500515,748510389,203191898,423951674,629786193,672850561,814362881,823845496,116667533,256473217,627655552,
245795606,586445753,172114298,193781724,778983779,83868974,315103615,965785236,492741665,377329025,847549272,698611116};
#define M 10000000
int FAC(int n)
{
	if(n <= M) return fac[n];
    int res = A[n / M - 1];
    for(int i = (n / M) * M + 1; i <= n; i++) res = 1ll * res * i % mod;
    return res;
}
// Can also solved "n! \mod 1000000007" by Lagrange interpolation and polynomial inversion. O(\sqrt{n} \log \sqrt{n}), method in Min25.
// Sorry for this table. I apologize.
int main()
{
	freopen ("heap.in", "r", stdin);
	freopen ("heap.out", "w", stdout);
	scanf("%d",&n);
	fac[0] = 1;
	for(int i = 1; i < N; i++) fac[i] = 1ll * fac[i - 1] * i % mod;
	std::cout << 1ll * FAC (n) * Pow (F(n), mod - 2) % mod << "\n";
}
